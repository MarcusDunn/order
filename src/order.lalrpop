use crate::lexer::{Token, Error};
use crate::ast::{NumberLiteral};

use std::str::FromStr;

grammar<'input>(text: &'input str);

pub NumberLiteral: NumberLiteral = {
    "NumberLiteral" => NumberLiteral::from_str(<>).unwrap()
};

extern {
    type Location = usize;
    type Error = Error;

    enum Token<'input> {
        "data" => Token::Data,
        "where" => Token::Where,
        "->" => Token::SkinnyArrow,
        ":" => Token::Colon,
        "=" => Token::Equals,
        "\n" => Token::NewLine,
        " " => Token::Space,
        "\t" => Token::Tab,
        "--" => Token::DoubleDash,
        "(" => Token::LeftParen,
        ")" => Token::RightParen,
        "Identifier" => Token::Identifier(<&'input str>),
        "NumberLiteral" => Token::NumberLiteral(<&'input str>),
        "IdentifierSeries" => Token::IdentifierSeries(<&'input str>),
    }
}